// Code generated by "selector_spec_test_generator.go"; DO NOT EDIT

package cluster_test

import (
	"testing"
	"time"

	"github.com/stretchr/testify/require"

	. "github.com/10gen/mongo-go-driver/cluster"
	"github.com/10gen/mongo-go-driver/conn"
	"github.com/10gen/mongo-go-driver/readpref"
	"github.com/10gen/mongo-go-driver/server"
)

func TestReadPref_ReplicaSetNoPrimary_read_Nearest(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.NearestMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetNoPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("c:27017"),
			AverageRTT:    time.Duration(100) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_Nearest_multiple(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.NearestMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetNoPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(10) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(20) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(10) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("c:27017"),
			AverageRTT:    time.Duration(20) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(10) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("c:27017"),
			AverageRTT:    time.Duration(20) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_Nearest_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.NearestMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "sf",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetNoPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_ReplicaSetNoPrimary_read_Primary(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.PrimaryMode,
		readpref.WithTagSets(
			server.NewTagSet(),
		),
	)

	c := &Desc{
		Type: ReplicaSetNoPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_ReplicaSetNoPrimary_read_PrimaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.PrimaryPreferredMode,
		readpref.WithTagSets(
			server.NewTagSet(),
		),
	)

	c := &Desc{
		Type: ReplicaSetNoPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("c:27017"),
			AverageRTT:    time.Duration(100) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_PrimaryPreferred_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.PrimaryPreferredMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "sf",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetNoPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_ReplicaSetNoPrimary_read_Secondary(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetNoPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("c:27017"),
			AverageRTT:    time.Duration(100) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryPreferredMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetNoPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("c:27017"),
			AverageRTT:    time.Duration(100) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_SecondaryPreferred_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryPreferredMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "sf",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetNoPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_ReplicaSetNoPrimary_read_Secondary_multi_tags(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",

				"rack", "one",
			),

			server.NewTagSet(
				"other_tag", "doesntexist",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetNoPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",

					"rack", "one",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "sf",

					"rack", "two",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",

				"rack", "one",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",

				"rack", "one",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_Secondary_multi_tags2(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",

				"rack", "one",
			),

			server.NewTagSet(
				"other_tag", "doesntexist",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetNoPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",

					"rack", "one",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",

					"rack", "two",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",

				"rack", "one",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",

				"rack", "one",
			),
		},
	)
}

func TestReadPref_ReplicaSetNoPrimary_read_Secondary_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "sf",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetNoPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_ReplicaSetWithPrimary_read_Nearest(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.NearestMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetWithPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(26) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("a:27017"),
				Type:          server.RSPrimary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 3)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(26) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSPrimary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("c:27017"),
			AverageRTT:    time.Duration(100) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_Nearest_multiple(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.NearestMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetWithPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(10) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(20) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("a:27017"),
				Type:          server.RSPrimary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 3)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(10) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(20) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSPrimary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("c:27017"),
			AverageRTT:    time.Duration(100) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(10) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(20) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSPrimary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_Nearest_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.NearestMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "sf",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetWithPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(26) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("a:27017"),
				Type:          server.RSPrimary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_ReplicaSetWithPrimary_read_Primary(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.PrimaryMode,
		readpref.WithTagSets(
			server.NewTagSet(),
		),
	)

	c := &Desc{
		Type: ReplicaSetWithPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(26) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("a:27017"),
				Type:          server.RSPrimary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(26) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSPrimary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(26) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSPrimary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_PrimaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.PrimaryPreferredMode,
		readpref.WithTagSets(
			server.NewTagSet(),
		),
	)

	c := &Desc{
		Type: ReplicaSetWithPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(26) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("a:27017"),
				Type:          server.RSPrimary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(26) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSPrimary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(26) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSPrimary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_PrimaryPreferred_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.PrimaryPreferredMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "sf",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetWithPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(26) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("a:27017"),
				Type:          server.RSPrimary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(26) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSPrimary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(26) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSPrimary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_Secondary(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetWithPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(26) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("a:27017"),
				Type:          server.RSPrimary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("c:27017"),
			AverageRTT:    time.Duration(100) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryPreferredMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetWithPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(26) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("a:27017"),
				Type:          server.RSPrimary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("c:27017"),
			AverageRTT:    time.Duration(100) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("b:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSSecondary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_SecondaryPreferred_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryPreferredMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "sf",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetWithPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(26) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("a:27017"),
				Type:          server.RSPrimary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(26) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSPrimary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(26) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSPrimary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_SecondaryPreferred_tags(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryPreferredMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetWithPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("a:27017"),
				Type:          server.RSPrimary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "sf",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSPrimary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.RSPrimary,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_ReplicaSetWithPrimary_read_Secondary_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "sf",
			),
		),
	)

	c := &Desc{
		Type: ReplicaSetWithPrimary,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("b:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(100) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("c:27017"),
				Type:          server.RSSecondary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(26) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("a:27017"),
				Type:          server.RSPrimary,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)
}

func TestReadPref_Sharded_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryPreferredMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",
			),
		),
	)

	c := &Desc{
		Type: Sharded,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("g:27017"),
				Type:          server.Mongos,
				Tags: server.NewTagSet(
					"data_center", "nyc",
				),
			},
			&server.Desc{
				AverageRTT:    time.Duration(35) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("h:27017"),
				Type:          server.Mongos,
				Tags: server.NewTagSet(
					"data_center", "dc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("g:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.Mongos,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("h:27017"),
			AverageRTT:    time.Duration(35) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.Mongos,
			Tags: server.NewTagSet(
				"data_center", "dc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("g:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.Mongos,
			Tags: server.NewTagSet(
				"data_center", "nyc",
			),
		},
	)
}

func TestReadPref_Single_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryPreferredMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",
			),
		),
	)

	c := &Desc{
		Type: Single,
		Servers: []*server.Desc{
			&server.Desc{
				AverageRTT:    time.Duration(5) * time.Millisecond,
				AverageRTTSet: true,
				Endpoint:      conn.Endpoint("a:27017"),
				Type:          server.Standalone,
				Tags: server.NewTagSet(
					"data_center", "dc",
				),
			},
		},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.Standalone,
			Tags: server.NewTagSet(
				"data_center", "dc",
			),
		},
	)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(
		result,
		&server.Desc{
			Endpoint:      conn.Endpoint("a:27017"),
			AverageRTT:    time.Duration(5) * time.Millisecond,
			AverageRTTSet: true,
			Type:          server.Standalone,
			Tags: server.NewTagSet(
				"data_center", "dc",
			),
		},
	)
}

func TestReadPref_Unknown_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)
	subject := readpref.New(readpref.SecondaryPreferredMode,
		readpref.WithTagSets(
			server.NewTagSet(
				"data_center", "nyc",
			),
		),
	)

	c := &Desc{
		Type:    Unknown,
		Servers: []*server.Desc{},
	}

	readPrefSelector := ReadPrefSelector(subject)
	result, err := readPrefSelector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{readPrefSelector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)
}
