// Code generated by "selector_spec_test_generator.go"; DO NOT EDIT

package cluster_test

import (
	"testing"
	"time"

	"github.com/stretchr/testify/require"

	. "github.com/10gen/mongo-go-driver/cluster"
	"github.com/10gen/mongo-go-driver/model"
	"github.com/10gen/mongo-go-driver/readpref"
)

func TestReadPref_ServerSelection_ReplicaSetNoPrimary_read_Nearest(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Nearest(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, b_27017)
	require.Contains(result, c_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_ServerSelection_ReplicaSetNoPrimary_read_Nearest_multiple(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(10) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(20) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Nearest(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, b_27017)
	require.Contains(result, c_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, b_27017)
	require.Contains(result, c_27017)

}

func TestReadPref_ServerSelection_ReplicaSetNoPrimary_read_Nearest_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Nearest(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "sf",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

}

func TestReadPref_ServerSelection_ReplicaSetNoPrimary_read_Primary(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Primary()
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

}

func TestReadPref_ServerSelection_ReplicaSetNoPrimary_read_PrimaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
		},
	}

	rp := readpref.PrimaryPreferred()
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, b_27017)
	require.Contains(result, c_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_ServerSelection_ReplicaSetNoPrimary_read_PrimaryPreferred_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
		},
	}

	rp := readpref.PrimaryPreferred(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "sf",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

}

func TestReadPref_ServerSelection_ReplicaSetNoPrimary_read_Secondary(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Secondary(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, b_27017)
	require.Contains(result, c_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_ServerSelection_ReplicaSetNoPrimary_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
		},
	}

	rp := readpref.SecondaryPreferred(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, b_27017)
	require.Contains(result, c_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_ServerSelection_ReplicaSetNoPrimary_read_SecondaryPreferred_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
		},
	}

	rp := readpref.SecondaryPreferred(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "sf",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

}

func TestReadPref_ServerSelection_ReplicaSetNoPrimary_read_Secondary_multi_tags(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",

			"rack", "one",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "sf",

			"rack", "two",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Secondary(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",

				"rack", "one",
			),

			model.NewTagSet(
				"other_tag", "doesntexist",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_ServerSelection_ReplicaSetNoPrimary_read_Secondary_multi_tags2(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",

			"rack", "one",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",

			"rack", "two",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Secondary(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",

				"rack", "one",
			),

			model.NewTagSet(
				"other_tag", "doesntexist",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_ServerSelection_ReplicaSetNoPrimary_read_Secondary_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Secondary(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "sf",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

}

func TestReadPref_ServerSelection_ReplicaSetNoPrimary_write_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
		},
	}

	selector := WriteSelector()

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

}

func TestReadPref_ServerSelection_ReplicaSetWithPrimary_read_Nearest(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(26) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSPrimary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
			a_27017,
		},
	}

	rp := readpref.Nearest(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 3)
	require.Contains(result, b_27017)
	require.Contains(result, a_27017)
	require.Contains(result, c_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_ServerSelection_ReplicaSetWithPrimary_read_Nearest_multiple(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(10) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(20) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSPrimary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
			a_27017,
		},
	}

	rp := readpref.Nearest(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 3)
	require.Contains(result, b_27017)
	require.Contains(result, a_27017)
	require.Contains(result, c_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, b_27017)
	require.Contains(result, a_27017)

}

func TestReadPref_ServerSelection_ReplicaSetWithPrimary_read_Nearest_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(26) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSPrimary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
			a_27017,
		},
	}

	rp := readpref.Nearest(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "sf",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

}

func TestReadPref_ServerSelection_ReplicaSetWithPrimary_read_Primary(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(26) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSPrimary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
			a_27017,
		},
	}

	rp := readpref.Primary()
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_ServerSelection_ReplicaSetWithPrimary_read_PrimaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(26) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSPrimary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
			a_27017,
		},
	}

	rp := readpref.PrimaryPreferred()
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_ServerSelection_ReplicaSetWithPrimary_read_PrimaryPreferred_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(26) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSPrimary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
			a_27017,
		},
	}

	rp := readpref.PrimaryPreferred(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "sf",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_ServerSelection_ReplicaSetWithPrimary_read_Secondary(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(26) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSPrimary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
			a_27017,
		},
	}

	rp := readpref.Secondary(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, b_27017)
	require.Contains(result, c_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_ServerSelection_ReplicaSetWithPrimary_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(26) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSPrimary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
			a_27017,
		},
	}

	rp := readpref.SecondaryPreferred(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, b_27017)
	require.Contains(result, c_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_ServerSelection_ReplicaSetWithPrimary_read_SecondaryPreferred_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(26) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSPrimary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
			a_27017,
		},
	}

	rp := readpref.SecondaryPreferred(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "sf",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_ServerSelection_ReplicaSetWithPrimary_read_SecondaryPreferred_tags(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSPrimary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "sf",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.SecondaryPreferred(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_ServerSelection_ReplicaSetWithPrimary_read_Secondary_non_matching(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(26) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSPrimary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
			a_27017,
		},
	}

	rp := readpref.Secondary(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "sf",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

}

func TestReadPref_ServerSelection_ReplicaSetWithPrimary_write_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(100) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(26) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.RSPrimary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			b_27017,
			c_27017,
			a_27017,
		},
	}

	selector := WriteSelector()

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_ServerSelection_Sharded_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	g_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("g:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.Mongos,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	h_27017 := &model.Server{
		AverageRTT:        time.Duration(35) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("h:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.Mongos,
		Tags: model.NewTagSet(
			"data_center", "dc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.Sharded,
		Servers: []*model.Server{
			g_27017,
			h_27017,
		},
	}

	rp := readpref.SecondaryPreferred(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, g_27017)
	require.Contains(result, h_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, g_27017)

}

func TestReadPref_ServerSelection_Sharded_write_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	g_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("g:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.Mongos,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	h_27017 := &model.Server{
		AverageRTT:        time.Duration(35) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("h:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.Mongos,
		Tags: model.NewTagSet(
			"data_center", "dc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.Sharded,
		Servers: []*model.Server{
			g_27017,
			h_27017,
		},
	}

	selector := WriteSelector()

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, g_27017)
	require.Contains(result, h_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, g_27017)

}

func TestReadPref_ServerSelection_Single_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.Standalone,
		Tags: model.NewTagSet(
			"data_center", "dc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.Single,
		Servers: []*model.Server{
			a_27017,
		},
	}

	rp := readpref.SecondaryPreferred(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_ServerSelection_Single_write_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.Standalone,
		Tags: model.NewTagSet(
			"data_center", "dc",
		),
		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.Single,
		Servers: []*model.Server{
			a_27017,
		},
	}

	selector := WriteSelector()

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_ServerSelection_Unknown_read_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	c := &model.Cluster{
		Kind:    model.Unknown,
		Servers: []*model.Server{},
	}

	rp := readpref.SecondaryPreferred(

		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

}

func TestReadPref_ServerSelection_Unknown_write_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	c := &model.Cluster{
		Kind:    model.Unknown,
		Servers: []*model.Server{},
	}

	selector := WriteSelector()

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

}

func TestReadPref_MaxStaleness_ReplicaSetNoPrimary_DefaultNoMaxStaleness(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(50) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1000, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.Nearest()
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, a_27017)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetNoPrimary_Incompatible(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(120) * time.Second),
	)
	selector := readpref.Selector(rp)

	_, err := selector(c, c.Servers)
	require.Error(err)
}

func TestReadPref_MaxStaleness_ReplicaSetNoPrimary_LastUpdateTime(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 1000000),
		LastWriteTime:     time.Unix(125, 2000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(50) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(25, 2000000),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(25, 1000000),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(150) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, a_27017)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetNoPrimary_Nearest(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(125, 2000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(50) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(150) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, a_27017)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetNoPrimary_Nearest2(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(50) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(125, 2000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(150) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, a_27017)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetNoPrimary_NoKnownServers(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(0) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.Unknown,

		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(0) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.Unknown,

		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(1) * time.Second),
	)
	selector := readpref.Selector(rp)

	_, err := selector(c, c.Servers)
	require.Error(err)
}

func TestReadPref_MaxStaleness_ReplicaSetNoPrimary_PrimaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1000, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.PrimaryPreferred(
		readpref.WithMaxStaleness(time.Duration(90) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetNoPrimary_PrimaryPreferred_tags(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(125, 2000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "tokyo",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.PrimaryPreferred(
		readpref.WithMaxStaleness(time.Duration(150)*time.Second),
		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),

			model.NewTagSet(
				"data_center", "tokyo",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetNoPrimary_Secondary(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(125, 2000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "tokyo",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	d_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("d:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "tokyo",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
			c_27017,
			d_27017,
		},
	}

	rp := readpref.Secondary(
		readpref.WithMaxStaleness(time.Duration(150)*time.Second),
		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetNoPrimary_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1000, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.SecondaryPreferred(
		readpref.WithMaxStaleness(time.Duration(120) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetNoPrimary_SecondaryPreferred_tags(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(125, 2000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "tokyo",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	d_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("d:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "tokyo",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
			c_27017,
			d_27017,
		},
	}

	rp := readpref.SecondaryPreferred(
		readpref.WithMaxStaleness(time.Duration(150)*time.Second),
		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetNoPrimary_ZeroMaxStaleness(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetNoPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(0) * time.Second),
	)
	selector := readpref.Selector(rp)

	_, err := selector(c, c.Servers)
	require.Error(err)
}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_DefaultNoMaxStaleness(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(50) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1000, 1000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.Nearest()
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, a_27017)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_Incompatible(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(120) * time.Second),
	)
	selector := readpref.Selector(rp)

	_, err := selector(c, c.Servers)
	require.Error(err)
}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_LastUpdateTime(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(50) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 1000000),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(125, 1000000),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(125, 1000000),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(150) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, a_27017)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_LongHeartbeat(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(120000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(50) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(120000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(130) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, a_27017)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_LongHeartbeat2(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(120000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(120000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(129) * time.Second),
	)
	selector := readpref.Selector(rp)

	_, err := selector(c, c.Servers)
	require.Error(err)
}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_MaxStalenessTooSmall(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(500) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(500) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(89) * time.Second),
	)
	selector := readpref.Selector(rp)

	_, err := selector(c, c.Servers)
	require.Error(err)
}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_Nearest(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(125, 2000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(50) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(150) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, a_27017)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_Nearest2(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(50) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(125, 2000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(150) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, a_27017)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_Nearest_tags(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(125, 2000000),
		Kind:              model.RSPrimary,
		Tags: model.NewTagSet(
			"data_center", "tokyo",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(150)*time.Second),
		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),

			model.NewTagSet(
				"data_center", "tokyo",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_PrimaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.PrimaryPreferred(
		readpref.WithMaxStaleness(time.Duration(150) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_PrimaryPreferred_incompatible(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.PrimaryPreferred(
		readpref.WithMaxStaleness(time.Duration(150) * time.Second),
	)
	selector := readpref.Selector(rp)

	_, err := selector(c, c.Servers)
	require.Error(err)
}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_SecondaryPreferred(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1000, 1000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.SecondaryPreferred(
		readpref.WithMaxStaleness(time.Duration(120) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_SecondaryPreferred_tags(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(125, 2000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(50) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 1000000),
		LastWriteTime:     time.Unix(1000, 1000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	d_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("d:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	e_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("e:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "tokyo",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
			c_27017,
			d_27017,
			e_27017,
		},
	}

	rp := readpref.SecondaryPreferred(
		readpref.WithMaxStaleness(time.Duration(150)*time.Second),
		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, b_27017)
	require.Contains(result, c_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_SecondaryPreferred_tags2(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(125, 2000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "tokyo",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
			c_27017,
		},
	}

	rp := readpref.SecondaryPreferred(
		readpref.WithMaxStaleness(time.Duration(150)*time.Second),
		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),

			model.NewTagSet(
				"data_center", "tokyo",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_Secondary_tags(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(125, 2000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(50) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 1000000),
		LastWriteTime:     time.Unix(1000, 1000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	d_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("d:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	e_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("e:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "tokyo",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
			c_27017,
			d_27017,
			e_27017,
		},
	}

	rp := readpref.Secondary(
		readpref.WithMaxStaleness(time.Duration(150)*time.Second),
		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, b_27017)
	require.Contains(result, c_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_Secondary_tags2(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(125, 2000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "tokyo",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("c:27017"),
		HeartbeatInterval: time.Duration(25000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,
		Tags: model.NewTagSet(
			"data_center", "nyc",
		),
		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
			c_27017,
		},
	}

	rp := readpref.Secondary(
		readpref.WithMaxStaleness(time.Duration(150)*time.Second),
		readpref.WithTagSets(
			model.NewTagSet(
				"data_center", "nyc",
			),

			model.NewTagSet(
				"data_center", "tokyo",
			),
		),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, b_27017)

}

func TestReadPref_MaxStaleness_ReplicaSetWithPrimary_ZeroMaxStaleness(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 2000000),
		Kind:              model.RSPrimary,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.RSSecondary,

		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.ReplicaSetWithPrimary,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(0) * time.Second),
	)
	selector := readpref.Selector(rp)

	_, err := selector(c, c.Servers)
	require.Error(err)
}

func TestReadPref_MaxStaleness_Sharded_Incompatible(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.Mongos,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.Mongos,

		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.Sharded,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(120) * time.Second),
	)
	selector := readpref.Selector(rp)

	_, err := selector(c, c.Servers)
	require.Error(err)
}

func TestReadPref_MaxStaleness_Sharded_SmallMaxStaleness(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(10000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.Mongos,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	b_27017 := &model.Server{
		AverageRTT:        time.Duration(50) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("b:27017"),
		HeartbeatInterval: time.Duration(10000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.Mongos,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.Sharded,
		Servers: []*model.Server{
			a_27017,
			b_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(1) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 2)
	require.Contains(result, a_27017)
	require.Contains(result, b_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_MaxStaleness_Single_Incompatible(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(0) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.Standalone,

		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.Single,
		Servers: []*model.Server{
			a_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(120) * time.Second),
	)
	selector := readpref.Selector(rp)

	_, err := selector(c, c.Servers)
	require.Error(err)
}

func TestReadPref_MaxStaleness_Single_SmallMaxStaleness(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(5) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(10000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(0, 1000000),
		Kind:              model.Standalone,

		Version: model.Version{Parts: []uint8{3, 4, 0}},
	}

	c := &model.Cluster{
		Kind: model.Single,
		Servers: []*model.Server{
			a_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(1) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 1)
	require.Contains(result, a_27017)

}

func TestReadPref_MaxStaleness_Unknown_SmallMaxStaleness(t *testing.T) {
	t.Parallel()

	require := require.New(t)

	a_27017 := &model.Server{
		AverageRTT:        time.Duration(0) * time.Millisecond,
		AverageRTTSet:     true,
		Addr:              model.Addr("a:27017"),
		HeartbeatInterval: time.Duration(10000) * time.Millisecond,
		LastUpdateTime:    time.Unix(0, 0),
		LastWriteTime:     time.Unix(1388534400, 0),
		Kind:              model.Unknown,

		Version: model.Version{Parts: []uint8{3, 2, 0}},
	}

	c := &model.Cluster{
		Kind: model.Unknown,
		Servers: []*model.Server{
			a_27017,
		},
	}

	rp := readpref.Nearest(
		readpref.WithMaxStaleness(time.Duration(1) * time.Second),
	)
	selector := readpref.Selector(rp)

	result, err := selector(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

	latencySelector := LatencySelector(time.Duration(15) * time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
	require.NoError(err)
	require.Len(result, 0)

}
