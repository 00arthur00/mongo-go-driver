// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"html/template"
	"io/ioutil"
	"log"
	"strconv"
	"strings"
	"time"

	"path/filepath"

	"gopkg.in/yaml.v2"
)

func main() {
	log.SetFlags(0)
	log.SetPrefix(name + ": ")

	var g Generator

	g.printlnf("// Code generated by \"%s.go\"; DO NOT EDIT\n", name)

	src := g.generate()

	err := ioutil.WriteFile(fmt.Sprintf("%s.go", strings.TrimSuffix(name, "_generator")), src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer // Accumulated output.
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

func (g *Generator) printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

func (g *Generator) printlnf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format+"\n", args...)
}

// EVERYTHING ABOVE IS CONSTANT BETWEEN THE GENERATORS

const name = "selector_spec_test_generator"

func (g *Generator) generate() []byte {

	serverSelectionFiles, err := filepath.Glob("../specifications/source/server-selection/tests/server_selection/*/*/*.yml")
	if err != nil {
		log.Fatalf("error reading server-selection files: %s", err)
	}
	serverSelectionTests := g.loadTests("ServerSelection", "../specifications/source/server-selection/tests/server_selection", serverSelectionFiles)

	maxStalenessFiles, err := filepath.Glob("../specifications/source/max-staleness/tests/**/*.yml")
	if err != nil {
		log.Fatalf("error reading max-staleness files: %s", err)
	}
	maxStalenessTests := g.loadTests("MaxStaleness", "../specifications/source/max-staleness/tests", maxStalenessFiles)

	tests := append(serverSelectionTests, maxStalenessTests...)

	tmpl, err := g.getTemplate()
	if err != nil {
		log.Fatalf("error loading template: %s", err)
	}

	tmpl.Execute(&g.buf, tests)

	return g.format()
}

func (g *Generator) loadTests(prefix, base string, filenames []string) []*testDef {
	var tests []*testDef

	for _, filename := range filenames {
		if strings.Contains(filename, "PossiblePrimary") {
			continue
		}

		test, err := g.loadTest(filename)
		if err != nil {
			log.Fatalf("error loading test from file %q: %s", filename, err)
		}
		if test == nil {
			continue
		}

		rel, err := filepath.Rel(base, filename)
		if err != nil {
			log.Fatalf(err.Error())
		}

		test.Name = prefix + "_" + strings.Replace(rel[:len(rel)-4], string(filepath.Separator), "_", -1)
		tests = append(tests, test)
	}

	return tests
}

func (g *Generator) loadTest(filename string) (*testDef, error) {
	content, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var testDef testDef
	err = yaml.Unmarshal(content, &testDef)
	if err != nil {
		return nil, err
	}

	if testDef.ReadPreference.Mode == "" {
		testDef.ReadPreference.Mode = "Primary"
	}

	if len(testDef.ReadPreference.TagSets) == 1 && len(testDef.ReadPreference.TagSets[0]) == 0 {
		testDef.ReadPreference.TagSets = nil
	}

	for _, s := range testDef.TopologyDescription.Servers {
		s.Name = strings.Replace(s.Address, ":", "_", -1)
		s.HeartbeatIntervalMS = testDef.HeartbeatFrequencyMS
	}
	for _, s := range testDef.SuitableServers {
		s.Name = strings.Replace(s.Address, ":", "_", -1)
		s.HeartbeatIntervalMS = testDef.HeartbeatFrequencyMS
	}
	for _, s := range testDef.InLatencyWindow {
		s.Name = strings.Replace(s.Address, ":", "_", -1)
		s.HeartbeatIntervalMS = testDef.HeartbeatFrequencyMS
	}

	if testDef.ReadPreference.Mode == "Primary" {
		if testDef.ReadPreference.MaxStalenessSeconds != nil || len(testDef.ReadPreference.TagSets) > 0 {
			// this is prevented by the compiler, so no need to "verify" it
			return nil, nil
		}
	}

	return &testDef, nil
}

func (g *Generator) getTemplate() (*template.Template, error) {
	content := `package cluster_test

import (
	"testing"
	"time"

   	"github.com/stretchr/testify/require"

    . "github.com/10gen/mongo-go-driver/cluster"
	"github.com/10gen/mongo-go-driver/conn"
    "github.com/10gen/mongo-go-driver/readpref"
    "github.com/10gen/mongo-go-driver/server"
)
{{range .}}
func TestReadPref_{{.Name}}(t *testing.T) {
	t.Parallel()
	
	require := require.New(t)
	{{with .TopologyDescription}}
	{{range .Servers}}
	{{.Name}} := &server.Desc{
		AverageRTT: time.Duration({{.AverageRTTMS}})*time.Millisecond,
		AverageRTTSet: true,
		Endpoint: conn.Endpoint("{{.Address}}"),
		HeartbeatInterval: time.Duration({{.HeartbeatIntervalMS}})*time.Millisecond,
		LastUpdateTime: time.Unix({{.LastUpdateTime.Unix}}, {{.LastUpdateTime.Nanosecond}}),
		LastWriteTime: time.Unix({{.LastWriteTime.Unix}}, {{.LastWriteTime.Nanosecond}}),
		Type: server.{{.Type}},
		{{if .Tags}}Tags: server.NewTagSet({{range $key, $value := .Tags}}
			"{{$key}}", "{{$value}}",
		{{end}}),{{end}}
		Version: {{if eq .MaxWireVersion 5}}conn.Version{Parts: []uint8{3, 4, 0}}{{else}}conn.Version{Parts: []uint8{3, 2, 0}}{{end}},
	}
	{{end}}
    c := &Desc{
        Type: {{.Type}},
        Servers: []*server.Desc{
        {{range .Servers}}{{.Name}},
            {{end}}
        },
    }
	{{end}}

	{{if eq .Operation "write" }}
	selector := WriteSelector()
	{{else}}{{with .ReadPreference}}
	rp := readpref.{{if .Mode}}{{.Mode}}{{else}}Primary{{end}}(
		{{if .MaxStalenessSeconds}}readpref.WithMaxStaleness(time.Duration({{.MaxStalenessSeconds}})*time.Second),{{end}}
        {{if .TagSets}}readpref.WithTagSets({{range .TagSets}}
			server.NewTagSet({{range $key, $value := .}}
				"{{$key}}", "{{$value}}",
			{{end -}}),
        {{end}}),{{end}}
	){{end}}
	selector := ReadPrefSelector(rp)
	{{end}}
	{{if .Error}}
	_, err := selector(c, c.Servers)
	require.Error(err)
	{{else}}
	result, err := selector(c, c.Servers)
    require.NoError(err)
    require.Len(result, {{ len .SuitableServers }})
	{{ range .SuitableServers }}require.Contains(result,{{.Name}})
	{{end}}

	latencySelector := LatencySelector(time.Duration(15)*time.Millisecond)
	result, err = CompositeSelector([]ServerSelector{selector, latencySelector})(c, c.Servers)
    require.NoError(err)
    require.Len(result, {{ len .InLatencyWindow }})
	{{ range .InLatencyWindow }}require.Contains(result, {{.Name}})
	{{end}}
	{{end}}}
{{end}}
`
	tmpl, err := template.New("").Parse(content)
	if err != nil {
		return nil, err
	}
	return tmpl, nil
}

type testDef struct {
	Name string

	Error                bool          `yaml:"error"`
	HeartbeatFrequencyMS int           `yaml:"heartbeatFrequencyMS"`
	TopologyDescription  topDesc       `yaml:"topology_description"`
	Operation            string        `yaml:"operation"`
	ReadPreference       readPref      `yaml:"read_preference"`
	SuitableServers      []*serverDesc `yaml:"suitable_servers"`
	InLatencyWindow      []*serverDesc `yaml:"in_latency_window"`
}

type topDesc struct {
	Type    string        `yaml:"type"`
	Servers []*serverDesc `yaml:"servers"`
}

type serverDesc struct {
	Name                string
	HeartbeatIntervalMS int

	Address          string            `yaml:"address"`
	AverageRTTMS     int               `yaml:"avg_rtt_ms"`
	LastUpdateTimeMS int               `yaml:"lastUpdateTime"`
	LastWrite        lastWrite         `yaml:"lastWrite"`
	MaxWireVersion   int               `yaml:"maxWireVersion"`
	Type             string            `yaml:"type"`
	Tags             map[string]string `yaml:"tags"`
}

func (s *serverDesc) LastUpdateTime() time.Time {
	return time.Unix(0, 0).Add(time.Duration(s.LastUpdateTimeMS) * time.Millisecond)
}

func (s *serverDesc) LastWriteTime() time.Time {
	if s.LastWrite.LastWriteDate != nil {
		m := s.LastWrite.LastWriteDate["$numberLong"]
		i, _ := strconv.Atoi(m)
		return time.Unix(0, 0).Add(time.Duration(i) * time.Millisecond)
	}
	return time.Now().UTC()
}

type lastWrite struct {
	LastWriteDate map[string]string `yaml:"lastWriteDate"`
}

type readPref struct {
	MaxStalenessSeconds *int                `yaml:"maxStalenessSeconds"`
	Mode                string              `yaml:"mode"`
	TagSets             []map[string]string `yaml:"tag_sets"`
}
