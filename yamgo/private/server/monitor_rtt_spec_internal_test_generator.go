// +build ignore

package main

import (
	"bytes"
	"errors"
	"fmt"
	"go/format"
	"html/template"
	"io/ioutil"
	"log"
	"path"

	"strings"

	yaml "gopkg.in/yaml.v2"
)

func main() {
	log.SetFlags(0)
	log.SetPrefix(name + ": ")

	var g Generator

	g.printlnf("// Code generated by \"%s.go\"; DO NOT EDIT\n", name)

	src := g.generate()

	err := ioutil.WriteFile(fmt.Sprintf("%s.go", strings.TrimSuffix(name, "_generator")), src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	buf bytes.Buffer // Accumulated output.
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

func (g *Generator) printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

func (g *Generator) printlnf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format+"\n", args...)
}

func (g *Generator) printIfNotEqual(name string, expected interface{}) {
	g.printlnf(`if %s != %s {`, name, expected)
	g.printlnf(`t.Fatalf("expected %s to be %s, but got \"%%s\"", %s)`,
		strings.Replace(name, "\"", "\\\"", -1),
		strings.Replace(fmt.Sprintf("%v", expected), "\"", "\\\"", -1),
		name)
	g.printlnf("}")
}

func (g *Generator) printStringIfNotEqual(name string, expected string) {
	g.printIfNotEqual(name, fmt.Sprintf("\"%s\"", expected))
}

func (g *Generator) replaceCharacters(target string, old, new string) string {
	j := 0
	for i := 0; i < len(old); i++ {
		target = strings.Replace(target, string(old[i]), string(new[j]), -1)
		if j < len(new)-1 {
			j++
		}
	}

	return target
}

func (g *Generator) replaceNullCharacter(target string) string {
	return strings.Replace(target, "\x00", "\\x00", -1)
}

// EVERYTHING ABOVE IS CONSTANT BETWEEN THE GENERATORS

const name = "monitor_rtt_spec_internal_test_generator"

func (g *Generator) generate() []byte {
	tests, err := loadTests("../../../specifications/source/server-selection/tests/rtt/")
	if err != nil {
		log.Fatalf("Failed to load tests: %s", err)
	}

	tmpl, err := getTemplate()
	if err != nil {
		log.Fatalf("Failed to parse template: %s", err)
	}

	err = tmpl.Execute(&g.buf, tests)
	if err != nil {
		log.Fatalf("Failed to execute template: %s", err)
	}

	return g.format()
}

type rttTest struct {
	Name                   string
	AverageRTTSet          bool
	AverageRTT             float64
	AverageRTTUnmarshalled interface{} `yaml:"avg_rtt_ms"`
	NewRTT                 float64     `yaml:"new_rtt_ms"`
	NewAverageRTT          float64     `yaml:"new_avg_rtt"`
}

func loadTests(testsDir string) ([]rttTest, error) {
	testFiles, err := ioutil.ReadDir(testsDir)
	if err != nil {
		return nil, err
	}

	tests := make([]rttTest, 0, 7)

	for _, file := range testFiles {
		filename := file.Name()
		ext := path.Ext(filename)
		if ext != ".yml" {
			continue
		}

		fullpath := path.Join(testsDir, filename)
		content, err := ioutil.ReadFile(fullpath)
		if err != nil {
			return nil, err
		}

		var test rttTest
		err = yaml.Unmarshal(content, &test)
		if err != nil {
			return nil, err
		}

		switch typed := test.AverageRTTUnmarshalled.(type) {
		case string:
			if typed != "NULL" {
				return nil, errors.New("unexpected string in AverageRTTUnmarshalled field")
			}
			test.AverageRTT = 0
			test.AverageRTTSet = false
		case int:
			test.AverageRTT = float64(typed)
			test.AverageRTTSet = true
		case float32:
			test.AverageRTT = float64(typed)
			test.AverageRTTSet = true
		case float64:
			test.AverageRTT = typed
			test.AverageRTTSet = true
		default:
			return nil, fmt.Errorf(
				"AverageRTTUnmarshalled contained unexpected type %T",
				test.AverageRTTUnmarshalled,
			)
		}

		test.Name = file.Name()[0 : len(filename)-len(ext)]

		tests = append(tests, test)
	}

	return tests, nil
}

func getTemplate() (*template.Template, error) {
	content := `// Code generated by "monitor_rtt_spec_internal_test_generator.go"; DO NOT EDIT
	
package server

import (
	"testing"
	"time"
)
{{range .}}
func TestRTT_{{.Name}}(t *testing.T) {
	t.Parallel()

	var (
		startingAverageRTT = time.Duration({{.AverageRTT}}*float64(time.Millisecond))
		newRTT = time.Duration({{.NewRTT}}*float64(time.Millisecond))
		newAverageRTT = time.Duration({{.NewAverageRTT}}*float64(time.Millisecond))
	)

	mon := Monitor{
		averageRTT: startingAverageRTT,
		averageRTTSet: {{.AverageRTTSet}},
	}

	expected := newAverageRTT
	actual := mon.updateAverageRTT(newRTT)

	if expected != actual {
		t.Errorf("\nStarting Avg RTT: %v\nNew RTT: %v\nExpected New Avg RTT: %v\nActual New Avg RTT: %v",
			startingAverageRTT.Seconds()*1000,
			newRTT.Seconds()*1000,
			expected.Seconds()*1000,
			actual.Seconds()*1000,
		)
	}
}
{{end}}
`
	tmpl, err := template.New("").Parse(content)
	if err != nil {
		return nil, err
	}
	return tmpl, nil
}
