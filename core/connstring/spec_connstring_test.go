// Code generated by "spec_connstring_test_generator.go"; DO NOT EDIT

package connstring_test

import "testing"
import "time"
import . "github.com/10gen/mongo-go-driver/core/connstring"

func TestParse_Empty_string(t *testing.T) {
	t.Parallel()

	_, err := Parse("")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Invalid_scheme(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongo://localhost:27017")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Missing_host(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Double_colon_in_host_identifier(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://localhost::27017")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Double_colon_in_host_identifier_and_trailing_slash(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://localhost::27017/")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Double_colon_in_host_identifier_with_missing_host_and_port(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://::")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Double_colon_in_host_identifier_with_missing_port(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://localhost,localhost::")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Double_colon_in_host_identifier_and_second_host(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://localhost::27017,abc")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Invalid_port__negative_number__with_hostname(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://localhost:-1")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Invalid_port__zero__with_hostname(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://localhost:0/")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Invalid_port__positive_number__with_hostname(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://localhost:65536")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Invalid_port__positive_number__with_hostname_and_trailing_slash(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://localhost:65536/")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Invalid_port__non_numeric_string__with_hostname(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://localhost:foo")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Invalid_port__negative_number__with_IP_literal(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://[::1]:-1")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Invalid_port__zero__with_IP_literal(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://[::1]:0/")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Invalid_port__positive_number__with_IP_literal(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://[::1]:65536")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Invalid_port__positive_number__with_IP_literal_and_trailing_slash(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://[::1]:65536/")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Invalid_port__non_numeric_string__with_IP_literal(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://[::1]:foo")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Missing_delimiting_slash_between_hosts_and_options(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://example.com?w=1")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Incomplete_key_value_pair_for_option(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://example.com/?w")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Username_with_password_containing_an_unescaped_percent_sign(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://alice%foo:bar@127.0.0.1")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Username_with_password_containing_an_unescaped_colon(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://alice:foo:bar@127.0.0.1")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Username_containing_an_unescaped_at_sign(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://alice@@127.0.0.1")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Username_with_password_containing_an_unescaped_at_sign(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb://alice@foo:bar@127.0.0.1")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_Host_with_unescaped_slash(t *testing.T) {
	t.Parallel()

	_, err := Parse("mongodb:///tmp/mongodb-27017.sock/")
	if err == nil {
		t.Fatal("expected an error but didn't get one")
	}
}

func TestParse_User_info_for_single_IPv4_host_without_database(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://alice:foo@127.0.0.1")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://alice:foo@127.0.0.1", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "127.0.0.1" {
		t.Fatalf("expected uri.Hosts[0] to be \"127.0.0.1\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "alice" {
		t.Fatalf("expected uri.Username to be \"alice\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "foo" {
		t.Fatalf("expected uri.Password to be \"foo\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_User_info_for_single_IPv4_host_with_database(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://alice:foo@127.0.0.1/test")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://alice:foo@127.0.0.1/test", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "127.0.0.1" {
		t.Fatalf("expected uri.Hosts[0] to be \"127.0.0.1\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "alice" {
		t.Fatalf("expected uri.Username to be \"alice\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "foo" {
		t.Fatalf("expected uri.Password to be \"foo\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "test" {
		t.Fatalf("expected uri.Database to be \"test\", but got \"%s\"", uri.Database)
	}
}

func TestParse_User_info_for_single_IPv4_host_with_database__escaped_null_bytes_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://a%00lice:f%00oo@127.0.0.1/t%00est")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://a%00lice:f%00oo@127.0.0.1/t%00est", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "127.0.0.1" {
		t.Fatalf("expected uri.Hosts[0] to be \"127.0.0.1\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "a\x00lice" {
		t.Fatalf("expected uri.Username to be \"a\x00lice\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "f\x00oo" {
		t.Fatalf("expected uri.Password to be \"f\x00oo\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "t\x00est" {
		t.Fatalf("expected uri.Database to be \"t\x00est\", but got \"%s\"", uri.Database)
	}
}

func TestParse_User_info_for_single_IP_literal_host_without_database(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://bob:bar@[::1]:27018")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://bob:bar@[::1]:27018", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "[::1]:27018" {
		t.Fatalf("expected uri.Hosts[0] to be \"[::1]:27018\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "bob" {
		t.Fatalf("expected uri.Username to be \"bob\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "bar" {
		t.Fatalf("expected uri.Password to be \"bar\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_User_info_for_single_IP_literal_host_with_database(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://bob:bar@[::1]:27018/admin")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://bob:bar@[::1]:27018/admin", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "[::1]:27018" {
		t.Fatalf("expected uri.Hosts[0] to be \"[::1]:27018\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "bob" {
		t.Fatalf("expected uri.Username to be \"bob\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "bar" {
		t.Fatalf("expected uri.Password to be \"bar\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin" {
		t.Fatalf("expected uri.Database to be \"admin\", but got \"%s\"", uri.Database)
	}
}

func TestParse_User_info_for_single_hostname_without_database(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://eve:baz@example.com")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://eve:baz@example.com", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "example.com" {
		t.Fatalf("expected uri.Hosts[0] to be \"example.com\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "eve" {
		t.Fatalf("expected uri.Username to be \"eve\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "baz" {
		t.Fatalf("expected uri.Password to be \"baz\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_User_info_for_single_hostname_with_database(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://eve:baz@example.com/db2")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://eve:baz@example.com/db2", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "example.com" {
		t.Fatalf("expected uri.Hosts[0] to be \"example.com\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "eve" {
		t.Fatalf("expected uri.Username to be \"eve\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "baz" {
		t.Fatalf("expected uri.Password to be \"baz\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "db2" {
		t.Fatalf("expected uri.Database to be \"db2\", but got \"%s\"", uri.Database)
	}
}

func TestParse_User_info_for_multiple_hosts_without_database(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://alice:secret@127.0.0.1,example.com:27018")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://alice:secret@127.0.0.1,example.com:27018", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "127.0.0.1" {
		t.Fatalf("expected uri.Hosts[0] to be \"127.0.0.1\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "example.com:27018" {
		t.Fatalf("expected uri.Hosts[1] to be \"example.com:27018\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "alice" {
		t.Fatalf("expected uri.Username to be \"alice\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "secret" {
		t.Fatalf("expected uri.Password to be \"secret\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_User_info_for_multiple_hosts_with_database(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://alice:secret@example.com,[::1]:27019/admin")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://alice:secret@example.com,[::1]:27019/admin", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "example.com" {
		t.Fatalf("expected uri.Hosts[0] to be \"example.com\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "[::1]:27019" {
		t.Fatalf("expected uri.Hosts[1] to be \"[::1]:27019\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "alice" {
		t.Fatalf("expected uri.Username to be \"alice\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "secret" {
		t.Fatalf("expected uri.Password to be \"secret\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin" {
		t.Fatalf("expected uri.Database to be \"admin\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Username_without_password(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://alice@127.0.0.1")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://alice@127.0.0.1", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "127.0.0.1" {
		t.Fatalf("expected uri.Hosts[0] to be \"127.0.0.1\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "alice" {
		t.Fatalf("expected uri.Username to be \"alice\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Username_with_empty_password(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://alice:@127.0.0.1")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://alice:@127.0.0.1", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "127.0.0.1" {
		t.Fatalf("expected uri.Hosts[0] to be \"127.0.0.1\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "alice" {
		t.Fatalf("expected uri.Username to be \"alice\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Escaped_username_and_database_without_password(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://%40l%3Ace@example.com/my%3Ddb")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://%40l%3Ace@example.com/my%3Ddb", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "example.com" {
		t.Fatalf("expected uri.Hosts[0] to be \"example.com\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "@l:ce" {
		t.Fatalf("expected uri.Username to be \"@l:ce\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "my=db" {
		t.Fatalf("expected uri.Database to be \"my=db\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Escaped_user_info_and_database__MONGODB_CR_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://%24am:f%3Azzb%40zz@127.0.0.1/admin%3F?authMechanism=MONGODB-CR")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://%24am:f%3Azzb%40zz@127.0.0.1/admin%3F?authMechanism=MONGODB-CR", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "127.0.0.1" {
		t.Fatalf("expected uri.Hosts[0] to be \"127.0.0.1\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "$am" {
		t.Fatalf("expected uri.Username to be \"$am\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "f:zzb@zz" {
		t.Fatalf("expected uri.Password to be \"f:zzb@zz\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin?" {
		t.Fatalf("expected uri.Database to be \"admin?\", but got \"%s\"", uri.Database)
	}
	if uri.AuthMechanism != "MONGODB-CR" {
		t.Fatalf("expected uri.AuthMechanism to be \"MONGODB-CR\", but got \"%s\"", uri.AuthMechanism)
	}
	if uri.ReplicaSet != "" {
		t.Fatalf("expected uri.ReplicaSet to be \"\", but got \"%s\"", uri.ReplicaSet)
	}
}

func TestParse_Escaped_username__MONGODB_X509_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://CN%3DmyName%2COU%3DmyOrgUnit%2CO%3DmyOrg%2CL%3DmyLocality%2CST%3DmyState%2CC%3DmyCountry@localhost/?authMechanism=MONGODB-X509")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://CN%3DmyName%2COU%3DmyOrgUnit%2CO%3DmyOrg%2CL%3DmyLocality%2CST%3DmyState%2CC%3DmyCountry@localhost/?authMechanism=MONGODB-X509", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "localhost" {
		t.Fatalf("expected uri.Hosts[0] to be \"localhost\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry" {
		t.Fatalf("expected uri.Username to be \"CN=myName,OU=myOrgUnit,O=myOrg,L=myLocality,ST=myState,C=myCountry\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
	if uri.AuthMechanism != "MONGODB-X509" {
		t.Fatalf("expected uri.AuthMechanism to be \"MONGODB-X509\", but got \"%s\"", uri.AuthMechanism)
	}
	if uri.ReplicaSet != "" {
		t.Fatalf("expected uri.ReplicaSet to be \"\", but got \"%s\"", uri.ReplicaSet)
	}
}

func TestParse_Escaped_username__GSSAPI_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://user%40EXAMPLE.COM:secret@localhost/?authMechanismProperties=SERVICE_NAME:other,CANONICALIZE_HOST_NAME:true&authMechanism=GSSAPI")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://user%40EXAMPLE.COM:secret@localhost/?authMechanismProperties=SERVICE_NAME:other,CANONICALIZE_HOST_NAME:true&authMechanism=GSSAPI", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "localhost" {
		t.Fatalf("expected uri.Hosts[0] to be \"localhost\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "user@EXAMPLE.COM" {
		t.Fatalf("expected uri.Username to be \"user@EXAMPLE.COM\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "secret" {
		t.Fatalf("expected uri.Password to be \"secret\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
	if uri.AuthMechanism != "GSSAPI" {
		t.Fatalf("expected uri.AuthMechanism to be \"GSSAPI\", but got \"%s\"", uri.AuthMechanism)
	}
	if uri.AuthMechanismProperties["CANONICALIZE_HOST_NAME"] != "true" {
		t.Fatalf("expected uri.AuthMechanismProperties[\"CANONICALIZE_HOST_NAME\"] to be \"true\", but got \"%s\"", uri.AuthMechanismProperties["CANONICALIZE_HOST_NAME"])
	}
	if uri.AuthMechanismProperties["SERVICE_NAME"] != "other" {
		t.Fatalf("expected uri.AuthMechanismProperties[\"SERVICE_NAME\"] to be \"other\", but got \"%s\"", uri.AuthMechanismProperties["SERVICE_NAME"])
	}
	if uri.ReplicaSet != "" {
		t.Fatalf("expected uri.ReplicaSet to be \"\", but got \"%s\"", uri.ReplicaSet)
	}
}

func TestParse_At_signs_in_options_aren_t_part_of_the_userinfo(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://alice:secret@example.com/admin?replicaset=my@replicaset")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://alice:secret@example.com/admin?replicaset=my@replicaset", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "example.com" {
		t.Fatalf("expected uri.Hosts[0] to be \"example.com\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "alice" {
		t.Fatalf("expected uri.Username to be \"alice\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "secret" {
		t.Fatalf("expected uri.Password to be \"secret\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin" {
		t.Fatalf("expected uri.Database to be \"admin\", but got \"%s\"", uri.Database)
	}
	if uri.AuthMechanism != "" {
		t.Fatalf("expected uri.AuthMechanism to be \"\", but got \"%s\"", uri.AuthMechanism)
	}
	if uri.ReplicaSet != "my@replicaset" {
		t.Fatalf("expected uri.ReplicaSet to be \"my@replicaset\", but got \"%s\"", uri.ReplicaSet)
	}
}

func TestParse_Single_IPv4_host_without_port(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://127.0.0.1")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://127.0.0.1", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "127.0.0.1" {
		t.Fatalf("expected uri.Hosts[0] to be \"127.0.0.1\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Single_IPv4_host_with_port(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://127.0.0.1:27018")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://127.0.0.1:27018", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "127.0.0.1:27018" {
		t.Fatalf("expected uri.Hosts[0] to be \"127.0.0.1:27018\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Single_IP_literal_host_without_port(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://[::1]")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://[::1]", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "[::1]" {
		t.Fatalf("expected uri.Hosts[0] to be \"[::1]\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Single_IP_literal_host_with_port(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://[::1]:27019")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://[::1]:27019", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "[::1]:27019" {
		t.Fatalf("expected uri.Hosts[0] to be \"[::1]:27019\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Single_hostname_without_port(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://example.com")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://example.com", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "example.com" {
		t.Fatalf("expected uri.Hosts[0] to be \"example.com\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Single_hostname_with_port(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://example.com:27020")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://example.com:27020", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "example.com:27020" {
		t.Fatalf("expected uri.Hosts[0] to be \"example.com:27020\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Single_hostname__resembling_IPv4__without_port(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://256.0.0.1")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://256.0.0.1", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "256.0.0.1" {
		t.Fatalf("expected uri.Hosts[0] to be \"256.0.0.1\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_hosts__mixed_formats_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://127.0.0.1,[::1]:27018,example.com:27019")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://127.0.0.1,[::1]:27018,example.com:27019", err)
	}
	if len(uri.Hosts) != 3 {
		t.Fatalf("expected 3 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "127.0.0.1" {
		t.Fatalf("expected uri.Hosts[0] to be \"127.0.0.1\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "[::1]:27018" {
		t.Fatalf("expected uri.Hosts[1] to be \"[::1]:27018\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Hosts[2] != "example.com:27019" {
		t.Fatalf("expected uri.Hosts[2] to be \"example.com:27019\", but got \"%s\"", uri.Hosts[2])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_UTF_8_hosts(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://bücher.example.com,umläut.example.com/")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://bücher.example.com,umläut.example.com/", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "bücher.example.com" {
		t.Fatalf("expected uri.Hosts[0] to be \"bücher.example.com\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "umläut.example.com" {
		t.Fatalf("expected uri.Hosts[1] to be \"umläut.example.com\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Option_names_are_normalized_to_lowercase(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://alice:secret@example.com/admin?AUTHMechanism=MONGODB-CR")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://alice:secret@example.com/admin?AUTHMechanism=MONGODB-CR", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "example.com" {
		t.Fatalf("expected uri.Hosts[0] to be \"example.com\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "alice" {
		t.Fatalf("expected uri.Username to be \"alice\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "secret" {
		t.Fatalf("expected uri.Password to be \"secret\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin" {
		t.Fatalf("expected uri.Database to be \"admin\", but got \"%s\"", uri.Database)
	}
	if uri.AuthMechanism != "MONGODB-CR" {
		t.Fatalf("expected uri.AuthMechanism to be \"MONGODB-CR\", but got \"%s\"", uri.AuthMechanism)
	}
	if uri.ReplicaSet != "" {
		t.Fatalf("expected uri.ReplicaSet to be \"\", but got \"%s\"", uri.ReplicaSet)
	}
}

func TestParse_Option_key_and_value__escaped_null_bytes_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://example.com/?replicaSet=my%00rs")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://example.com/?replicaSet=my%00rs", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "example.com" {
		t.Fatalf("expected uri.Hosts[0] to be \"example.com\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
	if uri.AuthMechanism != "" {
		t.Fatalf("expected uri.AuthMechanism to be \"\", but got \"%s\"", uri.AuthMechanism)
	}
	if uri.ReplicaSet != "my\x00rs" {
		t.Fatalf("expected uri.ReplicaSet to be \"my\x00rs\", but got \"%s\"", uri.ReplicaSet)
	}
}

func TestParse_Unix_domain_socket__absolute_path_with_trailing_slash_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://%2Ftmp%2Fmongodb-27017.sock/")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://%2Ftmp%2Fmongodb-27017.sock/", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "/tmp/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"/tmp/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Unix_domain_socket__absolute_path_without_trailing_slash_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://%2Ftmp%2Fmongodb-27017.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://%2Ftmp%2Fmongodb-27017.sock", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "/tmp/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"/tmp/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Unix_domain_socket__absolute_path_with_spaces_in_path_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://%2Ftmp%2F %2Fmongodb-27017.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://%2Ftmp%2F %2Fmongodb-27017.sock", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "/tmp/ /mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"/tmp/ /mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_Unix_domain_sockets__absolute_paths_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://%2Ftmp%2Fmongodb-27017.sock,%2Ftmp%2Fmongodb-27018.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://%2Ftmp%2Fmongodb-27017.sock,%2Ftmp%2Fmongodb-27018.sock", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "/tmp/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"/tmp/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "/tmp/mongodb-27018.sock" {
		t.Fatalf("expected uri.Hosts[1] to be \"/tmp/mongodb-27018.sock\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_hosts__absolute_path_and_ipv4_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://127.0.0.1:27017,%2Ftmp%2Fmongodb-27017.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://127.0.0.1:27017,%2Ftmp%2Fmongodb-27017.sock", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "127.0.0.1:27017" {
		t.Fatalf("expected uri.Hosts[0] to be \"127.0.0.1:27017\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "/tmp/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[1] to be \"/tmp/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_hosts__absolute_path_and_hostname_resembling_relative_path_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://mongodb-27017.sock,%2Ftmp%2Fmongodb-27018.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://mongodb-27017.sock,%2Ftmp%2Fmongodb-27018.sock", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "/tmp/mongodb-27018.sock" {
		t.Fatalf("expected uri.Hosts[1] to be \"/tmp/mongodb-27018.sock\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Unix_domain_socket_with_auth_database__absolute_path_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://alice:foo@%2Ftmp%2Fmongodb-27017.sock/admin")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://alice:foo@%2Ftmp%2Fmongodb-27017.sock/admin", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "/tmp/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"/tmp/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "alice" {
		t.Fatalf("expected uri.Username to be \"alice\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "foo" {
		t.Fatalf("expected uri.Password to be \"foo\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin" {
		t.Fatalf("expected uri.Database to be \"admin\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Unix_domain_socket_with_path_resembling_socket_file__absolute_path_with_trailing_slash_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://%2Ftmp%2Fpath.to.sock%2Fmongodb-27017.sock/")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://%2Ftmp%2Fpath.to.sock%2Fmongodb-27017.sock/", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "/tmp/path.to.sock/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"/tmp/path.to.sock/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Unix_domain_socket_with_path_resembling_socket_file__absolute_path_without_trailing_slash_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://%2Ftmp%2Fpath.to.sock%2Fmongodb-27017.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://%2Ftmp%2Fpath.to.sock%2Fmongodb-27017.sock", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "/tmp/path.to.sock/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"/tmp/path.to.sock/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Unix_domain_socket_with_path_resembling_socket_file_and_auth__absolute_path_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://bob:bar@%2Ftmp%2Fpath.to.sock%2Fmongodb-27017.sock/admin")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://bob:bar@%2Ftmp%2Fpath.to.sock%2Fmongodb-27017.sock/admin", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "/tmp/path.to.sock/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"/tmp/path.to.sock/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "bob" {
		t.Fatalf("expected uri.Username to be \"bob\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "bar" {
		t.Fatalf("expected uri.Password to be \"bar\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin" {
		t.Fatalf("expected uri.Database to be \"admin\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_Unix_domain_sockets_and_auth_DB_resembling_a_socket__absolute_path_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://%2Ftmp%2Fmongodb-27017.sock,%2Ftmp%2Fmongodb-27018.sock/admin.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://%2Ftmp%2Fmongodb-27017.sock,%2Ftmp%2Fmongodb-27018.sock/admin.sock", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "/tmp/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"/tmp/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "/tmp/mongodb-27018.sock" {
		t.Fatalf("expected uri.Hosts[1] to be \"/tmp/mongodb-27018.sock\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin.sock" {
		t.Fatalf("expected uri.Database to be \"admin.sock\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_Unix_domain_sockets_with_auth_DB_resembling_a_path__absolute_path_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://%2Ftmp%2Fmongodb-27017.sock,%2Ftmp%2Fmongodb-27018.sock/admin.shoe")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://%2Ftmp%2Fmongodb-27017.sock,%2Ftmp%2Fmongodb-27018.sock/admin.shoe", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "/tmp/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"/tmp/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "/tmp/mongodb-27018.sock" {
		t.Fatalf("expected uri.Hosts[1] to be \"/tmp/mongodb-27018.sock\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin.shoe" {
		t.Fatalf("expected uri.Database to be \"admin.shoe\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_Unix_domain_sockets_with_auth_and_query_string__absolute_path_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://bob:bar@%2Ftmp%2Fmongodb-27017.sock,%2Ftmp%2Fmongodb-27018.sock/admin?w=1")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://bob:bar@%2Ftmp%2Fmongodb-27017.sock,%2Ftmp%2Fmongodb-27018.sock/admin?w=1", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "/tmp/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"/tmp/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "/tmp/mongodb-27018.sock" {
		t.Fatalf("expected uri.Hosts[1] to be \"/tmp/mongodb-27018.sock\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "bob" {
		t.Fatalf("expected uri.Username to be \"bob\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "bar" {
		t.Fatalf("expected uri.Password to be \"bar\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin" {
		t.Fatalf("expected uri.Database to be \"admin\", but got \"%s\"", uri.Database)
	}
	if uri.AuthMechanism != "" {
		t.Fatalf("expected uri.AuthMechanism to be \"\", but got \"%s\"", uri.AuthMechanism)
	}
	if uri.ReplicaSet != "" {
		t.Fatalf("expected uri.ReplicaSet to be \"\", but got \"%s\"", uri.ReplicaSet)
	}
}

func TestParse_Unix_domain_socket__relative_path_with_trailing_slash_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://rel%2Fmongodb-27017.sock/")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://rel%2Fmongodb-27017.sock/", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "rel/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"rel/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Unix_domain_socket__relative_path_without_trailing_slash_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://rel%2Fmongodb-27017.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://rel%2Fmongodb-27017.sock", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "rel/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"rel/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Unix_domain_socket__relative_path_with_spaces_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://rel%2F %2Fmongodb-27017.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://rel%2F %2Fmongodb-27017.sock", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "rel/ /mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"rel/ /mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_Unix_domain_sockets__relative_paths_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://rel%2Fmongodb-27017.sock,rel%2Fmongodb-27018.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://rel%2Fmongodb-27017.sock,rel%2Fmongodb-27018.sock", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "rel/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"rel/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "rel/mongodb-27018.sock" {
		t.Fatalf("expected uri.Hosts[1] to be \"rel/mongodb-27018.sock\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_Unix_domain_sockets__relative_and_absolute_paths_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://rel%2Fmongodb-27017.sock,%2Ftmp%2Fmongodb-27018.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://rel%2Fmongodb-27017.sock,%2Ftmp%2Fmongodb-27018.sock", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "rel/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"rel/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "/tmp/mongodb-27018.sock" {
		t.Fatalf("expected uri.Hosts[1] to be \"/tmp/mongodb-27018.sock\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_hosts__relative_path_and_ipv4_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://127.0.0.1:27017,rel%2Fmongodb-27017.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://127.0.0.1:27017,rel%2Fmongodb-27017.sock", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "127.0.0.1:27017" {
		t.Fatalf("expected uri.Hosts[0] to be \"127.0.0.1:27017\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "rel/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[1] to be \"rel/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_hosts__relative_path_and_hostname_resembling_relative_path_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://mongodb-27017.sock,rel%2Fmongodb-27018.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://mongodb-27017.sock,rel%2Fmongodb-27018.sock", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "rel/mongodb-27018.sock" {
		t.Fatalf("expected uri.Hosts[1] to be \"rel/mongodb-27018.sock\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Unix_domain_socket_with_auth_database__relative_path_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://alice:foo@rel%2Fmongodb-27017.sock/admin")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://alice:foo@rel%2Fmongodb-27017.sock/admin", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "rel/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"rel/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "alice" {
		t.Fatalf("expected uri.Username to be \"alice\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "foo" {
		t.Fatalf("expected uri.Password to be \"foo\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin" {
		t.Fatalf("expected uri.Database to be \"admin\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Unix_domain_socket_with_path_resembling_socket_file__relative_path_with_trailing_slash_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://rel%2Fpath.to.sock%2Fmongodb-27017.sock/")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://rel%2Fpath.to.sock%2Fmongodb-27017.sock/", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "rel/path.to.sock/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"rel/path.to.sock/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Unix_domain_socket_with_path_resembling_socket_file__relative_path_without_trailing_slash_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://rel%2Fpath.to.sock%2Fmongodb-27017.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://rel%2Fpath.to.sock%2Fmongodb-27017.sock", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "rel/path.to.sock/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"rel/path.to.sock/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Unix_domain_socket_with_path_resembling_socket_file_and_auth__relative_path_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://bob:bar@rel%2Fpath.to.sock%2Fmongodb-27017.sock/admin")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://bob:bar@rel%2Fpath.to.sock%2Fmongodb-27017.sock/admin", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "rel/path.to.sock/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"rel/path.to.sock/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "bob" {
		t.Fatalf("expected uri.Username to be \"bob\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "bar" {
		t.Fatalf("expected uri.Password to be \"bar\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin" {
		t.Fatalf("expected uri.Database to be \"admin\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_Unix_domain_sockets_and_auth_DB_resembling_a_socket__relative_path_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://rel%2Fmongodb-27017.sock,rel%2Fmongodb-27018.sock/admin.sock")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://rel%2Fmongodb-27017.sock,rel%2Fmongodb-27018.sock/admin.sock", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "rel/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"rel/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "rel/mongodb-27018.sock" {
		t.Fatalf("expected uri.Hosts[1] to be \"rel/mongodb-27018.sock\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin.sock" {
		t.Fatalf("expected uri.Database to be \"admin.sock\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_Unix_domain_sockets_with_auth_DB_resembling_a_path__relative_path_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://rel%2Fmongodb-27017.sock,rel%2Fmongodb-27018.sock/admin.shoe")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://rel%2Fmongodb-27017.sock,rel%2Fmongodb-27018.sock/admin.shoe", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "rel/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"rel/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "rel/mongodb-27018.sock" {
		t.Fatalf("expected uri.Hosts[1] to be \"rel/mongodb-27018.sock\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin.shoe" {
		t.Fatalf("expected uri.Database to be \"admin.shoe\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Multiple_Unix_domain_sockets_with_auth_and_query_string__relative_path_(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://bob:bar@rel%2Fmongodb-27017.sock,rel%2Fmongodb-27018.sock/admin?w=1")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://bob:bar@rel%2Fmongodb-27017.sock,rel%2Fmongodb-27018.sock/admin?w=1", err)
	}
	if len(uri.Hosts) != 2 {
		t.Fatalf("expected 2 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "rel/mongodb-27017.sock" {
		t.Fatalf("expected uri.Hosts[0] to be \"rel/mongodb-27017.sock\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Hosts[1] != "rel/mongodb-27018.sock" {
		t.Fatalf("expected uri.Hosts[1] to be \"rel/mongodb-27018.sock\", but got \"%s\"", uri.Hosts[1])
	}
	if uri.Username != "bob" {
		t.Fatalf("expected uri.Username to be \"bob\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "bar" {
		t.Fatalf("expected uri.Password to be \"bar\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "admin" {
		t.Fatalf("expected uri.Database to be \"admin\", but got \"%s\"", uri.Database)
	}
	if uri.AuthMechanism != "" {
		t.Fatalf("expected uri.AuthMechanism to be \"\", but got \"%s\"", uri.AuthMechanism)
	}
	if uri.ReplicaSet != "" {
		t.Fatalf("expected uri.ReplicaSet to be \"\", but got \"%s\"", uri.ReplicaSet)
	}
}

func TestParse_Unrecognized_option_keys_are_ignored(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://example.com/?foo=bar")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://example.com/?foo=bar", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "example.com" {
		t.Fatalf("expected uri.Hosts[0] to be \"example.com\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Unsupported_option_values_are_ignored(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://example.com/?fsync=ifPossible")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://example.com/?fsync=ifPossible", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "example.com" {
		t.Fatalf("expected uri.Hosts[0] to be \"example.com\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
}

func TestParse_Repeated_option_keys(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://example.com/?replicaSet=test&replicaSet=test")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://example.com/?replicaSet=test&replicaSet=test", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "example.com" {
		t.Fatalf("expected uri.Hosts[0] to be \"example.com\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
	if uri.AuthMechanism != "" {
		t.Fatalf("expected uri.AuthMechanism to be \"\", but got \"%s\"", uri.AuthMechanism)
	}
	if uri.ReplicaSet != "test" {
		t.Fatalf("expected uri.ReplicaSet to be \"test\", but got \"%s\"", uri.ReplicaSet)
	}
}

func TestParse_Deprecated__or_unknown__options_are_ignored_if_replacement_exists(t *testing.T) {
	t.Parallel()

	uri, err := Parse("mongodb://example.com/?wtimeout=5&wtimeoutMS=10")
	if err != nil {
		t.Fatalf("error parsing \"%s\": %s", "mongodb://example.com/?wtimeout=5&wtimeoutMS=10", err)
	}
	if len(uri.Hosts) != 1 {
		t.Fatalf("expected 1 hosts, but had %d: %v", len(uri.Hosts), uri.Hosts)
	}
	if uri.Hosts[0] != "example.com" {
		t.Fatalf("expected uri.Hosts[0] to be \"example.com\", but got \"%s\"", uri.Hosts[0])
	}
	if uri.Username != "" {
		t.Fatalf("expected uri.Username to be \"\", but got \"%s\"", uri.Username)
	}
	if uri.Password != "" {
		t.Fatalf("expected uri.Password to be \"\", but got \"%s\"", uri.Password)
	}
	if uri.Database != "" {
		t.Fatalf("expected uri.Database to be \"\", but got \"%s\"", uri.Database)
	}
	if uri.AuthMechanism != "" {
		t.Fatalf("expected uri.AuthMechanism to be \"\", but got \"%s\"", uri.AuthMechanism)
	}
	if uri.ReplicaSet != "" {
		t.Fatalf("expected uri.ReplicaSet to be \"\", but got \"%s\"", uri.ReplicaSet)
	}
	if uri.WTimeout != time.Duration(10)*time.Millisecond {
		t.Fatalf("expected uri.WTimeout to be time.Duration(10) * time.Millisecond, but got \"%s\"", uri.WTimeout)
	}
}
